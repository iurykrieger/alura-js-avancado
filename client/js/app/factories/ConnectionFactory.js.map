{"version":3,"sources":["../../app-es6/factories/ConnectionFactory.js"],"names":["stores","version","dbname","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","error","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAIA,S,GAAS,CAAC,aAAD,C;AACTC,U,GAAU,C;AACVC,S,GAAS,Y;AAETC,a;AACAC,Q;;gCAESC,iB;AACZ,iCAAc;AAAA;;AACb,WAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACA;;;;qCAEsB;AACtB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,WAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;AACAS,mBAAYI,eAAZ,GAA8B;AAAA,eAAKT,kBAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC,CAAL;AAAA,QAA9B;AACAR,mBAAYS,SAAZ,GAAwB,aAAK;AAC5B,YAAI,CAAChB,UAAL,EAAiB;AAChBA,sBAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,iBAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,oBAAWC,KAAX,GAAmB,YAAW;AAC7B,gBAAM,IAAIE,KAAJ,CAAU,iBAAV,CAAN;AACA,UAFD;AAGA;AACDE,gBAAQL,UAAR;AACA,QATD;AAUAO,mBAAYW,OAAZ,GAAsB;AAAA,eAAKZ,OAAOO,EAAEC,MAAF,CAASK,KAAhB,CAAL;AAAA,QAAtB;AACA,OAdM,CAAP;AAeA;;;uCAEwB;AACxB,UAAInB,UAAJ,EAAgB;AACfC;AACAD,oBAAa,IAAb;AACA;AACD;;;mCAEoBA,U,EAAY;AAChCH,aAAOuB,OAAP,CAAe,iBAAS;AACvB,WAAIpB,WAAWqB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAChDvB,mBAAWwB,iBAAX,CAA6BD,KAA7B;AACA;AACDvB,kBAAWyB,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACA,OALD;AAMA","file":"ConnectionFactory.js","sourcesContent":["var stores = ['negociacoes'];\nvar version = 4;\nvar dbname = 'aluraframe';\n\nlet connection;\nlet close;\n\nexport class ConnectionFactory {\n\tconstructor() {\n\t\tthrow new Error('Não é possível criar instâncias dessa classe.');\n\t}\n\n\tstatic getConnection() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet openRequest = window.indexedDB.open(dbname, version);\n\t\t\topenRequest.onupgradeneeded = e => ConnectionFactory._createStores(e.target.result);\n\t\t\topenRequest.onsuccess = e => {\n\t\t\t\tif (!connection) {\n\t\t\t\t\tconnection = e.target.result;\n\t\t\t\t\tclose = connection.close.bind(connection);\n\t\t\t\t\tconnection.close = function() {\n\t\t\t\t\t\tthrow new Error('Are you insane?');\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tresolve(connection);\n\t\t\t};\n\t\t\topenRequest.onerror = e => reject(e.target.error);\n\t\t});\n\t}\n\n\tstatic closeConnection() {\n\t\tif (connection) {\n\t\t\tclose();\n\t\t\tconnection = null;\n\t\t}\n\t}\n\n\tstatic _createStores(connection) {\n\t\tstores.forEach(store => {\n\t\t\tif (connection.objectStoreNames.contains(store)) {\n\t\t\t\tconnection.deleteObjectStore(store);\n\t\t\t}\n\t\t\tconnection.createObjectStore(store, { autoIncrement: true });\n\t\t});\n\t}\n}\n"]}